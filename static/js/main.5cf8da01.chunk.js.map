{"version":3,"sources":["components/Column.tsx","constants.ts","images/food.jpg","components/MovableItem.tsx","Columns.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Title","Column","title","children","useDrop","accept","drop","name","collect","monitor","isOver","canDrop","ref","style","backgroundColor","COLUMN_NAMES","menus","id","column","FoodName","FoodImage","img","MovableItem","index","currentColumnName","moveCardHandler","setItems","changeItemColumn","currentItem","columnName","prevState","map","menu","useRef","hover","item","current","console","log","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","useDrag","type","end","dropResult","getDropResult","BREAKFAST","MORNING_SNACK","LUNCH","AFTERNOON_SNACK","DINNER","isDragging","opacity","drag","src","food","alt","ColumnContainer","Columns","useState","items","dragItem","coppiedStateArray","prevItem","splice","returnItemsForColumn","filter","DO_IT","IN_PROGRESS","AWAITING_REVIEW","DONE","DndProvider","backend","HTML5Backend","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cf8da01.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useDrop } from 'react-dnd'\r\nimport styled from 'styled-components'\r\n\r\ninterface IColumnProps {\r\n  title: string;\r\n}\r\n\r\nconst Column: React.FC<IColumnProps> = ({ title, children }) => {\r\n  const [{isOver, canDrop}, drop] = useDrop({\r\n    accept: 'any',\r\n    drop: () => ({name: title}),\r\n    collect: (monitor) => ({\r\n        isOver: monitor.isOver(),\r\n        canDrop: monitor.canDrop(),\r\n    }),\r\n  });\r\n\r\n  const getBackgroundColor = () => {\r\n    if (isOver) {\r\n        if (canDrop) {\r\n            return 'rgb(188,251,255)'\r\n        } else if (!canDrop) {\r\n            return 'rgb(255,188,188)'\r\n        }\r\n    } else {\r\n        return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container ref={drop} style={{backgroundColor: getBackgroundColor()}}>\r\n        <Title>{title}</Title>\r\n        {children}\r\n    </Container>\r\n  )\r\n};\r\n\r\nconst Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n  min-height: 200px;\r\n  border-radius: 10px;\r\n  :hover {\r\n    background-color: #f7f6f8;\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-size: 16px;\r\n  text-transform: uppercase;\r\n  border-bottom: 2px solid red;\r\n`;\r\n\r\nexport default Column;\r\n","export const COLUMN_NAMES = {\r\n  BREAKFAST: 'Breakfast',\r\n  MORNING_SNACK: 'Morning Snack',\r\n  LUNCH: 'Lunch',\r\n  AFTERNOON_SNACK: 'Afternoon Snack',\r\n  DINNER: 'Dinner',\r\n} as const;\r\n\r\nexport type ColumnKeys = keyof typeof COLUMN_NAMES;\r\nexport type ColumnValues = typeof COLUMN_NAMES[ColumnKeys];\r\n\r\nexport type Menu = {\r\n  id: number,\r\n  name: string,\r\n  column: string,\r\n}\r\n\r\nexport const menus: Menu[] = [\r\n  {id: 1, name: 'Item 1', column: COLUMN_NAMES.BREAKFAST},\r\n  {id: 2, name: 'Item 2', column: COLUMN_NAMES.BREAKFAST},\r\n  {id: 3, name: 'Item 3', column: COLUMN_NAMES.BREAKFAST},\r\n  {id: 4, name: 'Item 4', column: COLUMN_NAMES.BREAKFAST},\r\n  {id: 5, name: 'Item 5', column: COLUMN_NAMES.BREAKFAST},\r\n];\r\n","export default __webpack_public_path__ + \"static/media/food.b59f87cb.jpg\";","import React, { useRef } from 'react'\r\nimport { useDrag, useDrop } from \"react-dnd\"\r\nimport styled from 'styled-components'\r\nimport { ColumnValues, COLUMN_NAMES, Menu } from '../constants'\r\nimport food from '../images/food.jpg'\r\n\r\ninterface IMovableItemProps {\r\n  name: string,\r\n  index: number,\r\n  currentColumnName: string,\r\n  moveCardHandler(dragIndex: number, hoverIndex: number): void,\r\n  setItems: React.Dispatch<any>;\r\n};\r\n\r\n\r\nconst MovableItem: React.FC<IMovableItemProps> = ({ name, index, currentColumnName, moveCardHandler, setItems }) => {\r\n  const changeItemColumn = (currentItem: any, columnName: ColumnValues) => {\r\n    setItems((prevState: Menu[]) => {\r\n        return prevState.map(menu => {\r\n            return {\r\n                ...menu,\r\n                column: menu.name === currentItem.name ? columnName : menu.column,\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\n  const ref = useRef(null);\r\n\r\n  const [, drop] = useDrop({\r\n      accept: 'any',\r\n      hover(item: any, monitor) {\r\n          if (!ref.current) {\r\n              return;\r\n          }\r\n          console.log({ item });\r\n          const dragIndex = item.index;\r\n          const hoverIndex = index;\r\n          // Don't replace items with themselves\r\n          if (dragIndex === hoverIndex) {\r\n              return;\r\n          }\r\n          // Determine rectangle on screen\r\n          const hoverBoundingRect = (ref.current as any).getBoundingClientRect();\r\n          // Get vertical middle\r\n          const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n          // Determine mouse position\r\n          const clientOffset = monitor.getClientOffset();\r\n          // Get pixels to the top\r\n          const hoverClientY = clientOffset && clientOffset.y - hoverBoundingRect.top;\r\n          // Only perform the move when the mouse has crossed half of the items height\r\n          // When dragging downwards, only move when the cursor is below 50%\r\n          // When dragging upwards, only move when the cursor is above 50%\r\n          // Dragging downwards\r\n          if (hoverClientY) {\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            // Dragging upwards\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n          }\r\n          console.log({ dragIndex, hoverIndex });\r\n          // Time to actually perform the action\r\n          moveCardHandler(dragIndex, hoverIndex);\r\n          // Note: we're mutating the monitor item here!\r\n          // Generally it's better to avoid mutations,\r\n          // but it's good here for the sake of performance\r\n          // to avoid expensive index searches.\r\n          item.index = hoverIndex;\r\n      },\r\n  });\r\n\r\n  const [{isDragging}, drag] = useDrag({\r\n      item: {index, name, currentColumnName, type: 'any'},\r\n      end: (item, monitor) => {\r\n          const dropResult = monitor.getDropResult();\r\n\r\n          if (dropResult) {\r\n              const { name } = dropResult as any;\r\n              const { BREAKFAST, MORNING_SNACK, LUNCH, AFTERNOON_SNACK, DINNER } = COLUMN_NAMES;\r\n              switch (name) {\r\n                  case BREAKFAST:\r\n                      changeItemColumn(item, BREAKFAST);\r\n                      break;\r\n                  case LUNCH:\r\n                      changeItemColumn(item, LUNCH);\r\n                      break;\r\n                  case MORNING_SNACK:\r\n                      changeItemColumn(item, MORNING_SNACK);\r\n                      break;\r\n                  case AFTERNOON_SNACK:\r\n                      changeItemColumn(item, AFTERNOON_SNACK);\r\n                      break;\r\n                  case DINNER:\r\n                      changeItemColumn(item, DINNER);\r\n                      break;\r\n                  default:\r\n                      break;\r\n              }\r\n          }\r\n      },\r\n      collect: (monitor) => ({\r\n          isDragging: monitor.isDragging(),\r\n      }),\r\n      type: 'any',\r\n  });\r\n\r\n  const opacity = isDragging ? 0.4 : 1;\r\n\r\n  drag(drop(ref));\r\n\r\n  return (\r\n      <Container ref={ref} style={{  opacity }}>\r\n        <FoodName>{name}</FoodName>\r\n        {/* <FoodImage /> */}\r\n        <FoodImage src={food} alt={`food-${name}`} />\r\n      </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  border-radius: 10px;\r\n  height: 100px;\r\n  width: 100px;\r\n  \r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst FoodName = styled.div`\r\n  font-size: 12px;\r\n`;\r\n\r\nconst FoodImage = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  margin: 10px;\r\n  background: #fff;\r\n`;\r\n\r\nexport default MovableItem;\r\n","import React, { useState } from 'react'\r\nimport { DndProvider } from \"react-dnd\"\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\"\r\nimport styled from 'styled-components'\r\nimport Column from './components/Column'\r\nimport MovableItem from './components/MovableItem'\r\nimport { COLUMN_NAMES, menus } from './constants'\r\n\r\n\r\nconst Columns = () => {\r\n  const [items, setItems] = useState(menus);\r\n\r\n  const moveCardHandler = (dragIndex: number, hoverIndex: number) => {\r\n      const dragItem = items[dragIndex];\r\n      console.log({ dragItem });\r\n      if (dragItem) {\r\n          setItems((prevState => {\r\n              const coppiedStateArray = [...prevState];\r\n\r\n              // remove item by \"hoverIndex\" and put \"dragItem\" instead\r\n              const prevItem = coppiedStateArray.splice(hoverIndex, 1, dragItem);\r\n\r\n              // remove item by \"dragIndex\" and put \"prevItem\" instead\r\n              coppiedStateArray.splice(dragIndex, 1, prevItem[0]);\r\n\r\n              return coppiedStateArray;\r\n          }));\r\n      }\r\n  };\r\n\r\n  const returnItemsForColumn = (columnName: string) => {\r\n      return items\r\n          .filter((item) => item.column === columnName)\r\n          .map((item, index) => (\r\n              <MovableItem key={item.id}\r\n                name={item.name}\r\n                currentColumnName={item.column}\r\n                setItems={setItems}\r\n                index={index}\r\n                moveCardHandler={moveCardHandler}\r\n              />\r\n          ))\r\n  }\r\n\r\n  const {BREAKFAST: DO_IT, MORNING_SNACK: IN_PROGRESS, LUNCH: AWAITING_REVIEW, AFTERNOON_SNACK: DONE} = COLUMN_NAMES;\r\n  return (\r\n    <ColumnContainer>\r\n      <DndProvider backend={HTML5Backend}>\r\n        <Column title={DO_IT}>\r\n          {returnItemsForColumn(DO_IT)}\r\n        </Column>\r\n        <Column title={IN_PROGRESS}>\r\n          {returnItemsForColumn(IN_PROGRESS)}\r\n        </Column>\r\n        <Column title={AWAITING_REVIEW}>\r\n          {returnItemsForColumn(AWAITING_REVIEW)}\r\n        </Column>\r\n        <Column title={DONE}>\r\n          {returnItemsForColumn(DONE)}\r\n        </Column>\r\n      </DndProvider>\r\n    </ColumnContainer>\r\n  )\r\n};\r\n\r\nconst ColumnContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n`;\r\n\r\nexport default Columns;\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Columns from './Columns'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Columns />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}